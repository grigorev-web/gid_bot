const https = require('https');
const crypto = require('crypto');
const logger = require('../../shared/logger/logger');

class GigaChatService {
    constructor() {
        this.clientId = '97cfcff6-3d5b-414b-926c-eb84b359b1f6';
        this.scope = 'GIGACHAT_API_PERS';
        this.authUrl = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
        this.apiUrl = 'https://gigachat.devices.sberbank.ru/api/v1';
        this.accessToken = null;
        this.tokenExpiry = null;
        this.tokenRefreshPromise = null;
        this.requestQueue = [];
        this.isProcessingQueue = false;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
    generateRqUID() {
        return crypto.randomUUID();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Authorization key –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    getAuthKey() {
        const config = require('../../../../config');
        return config.GIGACHAT.AUTHORIZATION_KEY;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Access token —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async getAccessToken() {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (this.accessToken && this.tokenExpiry && Date.now() < this.tokenExpiry) {
            return this.accessToken;
        }

        // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (this.tokenRefreshPromise) {
            return this.tokenRefreshPromise;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        this.tokenRefreshPromise = this._refreshAccessToken();
        
        try {
            const token = await this.tokenRefreshPromise;
            return token;
        } finally {
            this.tokenRefreshPromise = null;
        }
    }

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    async _refreshAccessToken() {
        return new Promise((resolve, reject) => {
            const authKey = this.getAuthKey();
            if (!authKey || authKey === 'YOUR_AUTHORIZATION_KEY_HERE') {
                const error = new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å GIGACHAT_AUTH_KEY –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                logger.error(error.message);
                reject(error);
                return;
            }

            logger.info('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ Access token –¥–ª—è GigaChat...');

            const postData = `scope=${this.scope}`;
            const rqUID = this.generateRqUID();

            const options = {
                hostname: 'ngw.devices.sberbank.ru',
                port: 9443,
                path: '/api/v2/oauth',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Accept': 'application/json',
                    'RqUID': rqUID,
                    'Authorization': `Basic ${authKey}`
                }
            };

            const req = https.request(options, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const response = JSON.parse(data);
                        if (response.access_token) {
                            this.accessToken = response.access_token;
                            // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                            this.tokenExpiry = Date.now() + (30 * 60 * 1000);
                            logger.info('‚úÖ Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                            logger.info(`‚è∞ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${new Date(this.tokenExpiry).toLocaleString('ru-RU')}`);
                            resolve(this.accessToken);
                        } else {
                            const error = new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${data}`);
                            logger.error(error.message);
                            reject(error);
                        }
                    } catch (error) {
                        const parseError = new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
                        logger.error(parseError.message);
                        reject(parseError);
                    }
                });
            });

            req.on('error', (error) => {
                const requestError = new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
                logger.error(requestError.message);
                reject(requestError);
            });

            req.write(postData);
            req.end();
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤
    async sendMessage(message, userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', context = []) {
        const startTime = Date.now();
        
        return new Promise((resolve, reject) => {
            const requestData = {
                model: 'GigaChat:latest',
                messages: [
                    {
                        role: 'system',
                        content: `–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}`
                    },
                    ...context,
                    {
                        role: 'user',
                        content: message
                    }
                ],
                temperature: 0.7,
                max_tokens: 1000
            };
            console.log("***************************************");
            console.log(requestData.messages);
            console.log("***************************************");
            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
            logger.info(`ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API:`);
            logger.info(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
            logger.info(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}`);
            logger.info(`üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
            logger.info(`üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: model=${requestData.model}, temperature=${requestData.temperature}, max_tokens=${requestData.max_tokens}`);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            logger.info(`üìã –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GigaChat:`);
            requestData.messages.forEach((msg, index) => {
                logger.info(`   ${index + 1}. [${msg.role}] ${msg.content.substring(0, 100)}${msg.content.length > 100 ? '...' : ''}`);
            });

            const makeRequest = async () => {
                try {
                    const token = await this.getAccessToken();
                    
                    return new Promise((resolveRequest, rejectRequest) => {
                        const options = {
                            hostname: 'gigachat.devices.sberbank.ru',
                            port: 443,
                            path: '/api/v1/chat/completions',
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json',
                                'Authorization': `Bearer ${token}`
                            }
                        };

                        const req = https.request(options, (res) => {
                            let data = '';
                            
                            res.on('data', (chunk) => {
                                data += chunk;
                            });
                            
                            res.on('end', () => {
                                try {
                                    const response = JSON.parse(data);
                                    if (response.choices && response.choices[0] && response.choices[0].message) {
                                        const aiResponse = response.choices[0].message.content;
                                        const responseTime = Date.now() - startTime;
                                        
                                        logger.info(`ü§ñ GigaChat –æ—Ç–≤–µ—Ç (${responseTime}ms): ${aiResponse.substring(0, 100)}...`);
                                        logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞: tokens_used=${response.usage?.total_tokens || 0}, response_time=${responseTime}ms`);
                                        
                                        resolveRequest({
                                            content: aiResponse,
                                            model: 'GigaChat:latest',
                                            tokens_used: response.usage?.total_tokens || 0,
                                            response_time_ms: responseTime
                                        });
                                    } else {
                                        const error = new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ${data}`);
                                        logger.error(error.message);
                                        rejectRequest(error);
                                    }
                                } catch (error) {
                                    const parseError = new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
                                    logger.error(parseError.message);
                                    rejectRequest(parseError);
                                }
                            });
                        });

                        req.on('error', (error) => {
                            const requestError = new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: ${error.message}`);
                            logger.error(requestError.message);
                            rejectRequest(requestError);
                        });

                        req.write(JSON.stringify(requestData));
                        req.end();
                    });
                } catch (error) {
                    reject(error);
                }
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
            this.requestQueue.push({ makeRequest, resolve, reject });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            if (!this.isProcessingQueue) {
                this.processQueue();
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    async processQueue() {
        if (this.isProcessingQueue || this.requestQueue.length === 0) {
            return;
        }

        this.isProcessingQueue = true;

        while (this.requestQueue.length > 0) {
            const { makeRequest, resolve, reject } = this.requestQueue.shift();
            
            try {
                const result = await makeRequest();
                resolve(result);
            } catch (error) {
                reject(error);
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if (this.requestQueue.length > 0) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }

        this.isProcessingQueue = false;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    async getModels() {
        try {
            const token = await this.getAccessToken();
            
            return new Promise((resolve, reject) => {
                const options = {
                    hostname: 'gigachat.devices.sberbank.ru',
                    port: 443,
                    path: '/api/v1/models',
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                };

                const req = https.request(options, (res) => {
                    let data = '';
                    
                    res.on('data', (chunk) => {
                        data += chunk;
                    });
                    
                    res.on('end', () => {
                        try {
                            const response = JSON.parse(data);
                            resolve(response);
                        } catch (error) {
                            const parseError = new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
                            logger.error(parseError.message);
                            reject(parseError);
                        }
                    });
                });

                req.on('error', (error) => {
                    const requestError = new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
                    logger.error(requestError.message);
                    reject(requestError);
                });

                req.end();
            });
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: ${error.message}`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
    async checkStatus() {
        try {
            const models = await this.getModels();
            return {
                status: 'ok',
                models: models.data || [],
                available: true
            };
        } catch (error) {
            return {
                status: 'error',
                error: error.message,
                available: false
            };
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    cleanup() {
        this.accessToken = null;
        this.tokenExpiry = null;
        this.tokenRefreshPromise = null;
        this.requestQueue = [];
        this.isProcessingQueue = false;
    }
}

module.exports = GigaChatService; 