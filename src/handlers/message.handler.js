const logger = require('../../logger');

class MessageHandler {
    constructor(gigaChatService) {
        this.gigaChatService = gigaChatService;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    async handleStart(msg, bot) {
        const chatId = msg.chat.id;
        const userName = msg.from.first_name;
        
        logger.start(userName);
        
        const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã\n\n–Ø —É–º–Ω—ã–π Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GigaChat AI.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n/echo <—Ç–µ–∫—Å—Ç> - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò! ü§ñ`;
        
        bot.sendMessage(chatId, welcomeMessage);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    async handleHelp(msg, bot) {
        const chatId = msg.chat.id;
        
        const helpMessage = `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n` +
            `/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n` +
            `/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
            `/echo <—Ç–µ–∫—Å—Ç> - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç\n` +
            `/ai_status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat\n\n` +
            `üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò!`;
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', callback_data: 'start_bot' },
                    { text: 'üîä –ö–æ–º–∞–Ω–¥–∞ Echo', callback_data: 'echo_info' }
                ],
                [
                    { text: 'ü§ñ –°—Ç–∞—Ç—É—Å –ò–ò', callback_data: 'ai_status' },
                    { text: '‚ÑπÔ∏è –û –±–æ—Ç–µ', callback_data: 'about_bot' }
                ],
                [
                    { text: 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }
                ]
            ]
        };
        
        bot.sendMessage(chatId, helpMessage, {
            reply_markup: keyboard
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /echo
    async handleEcho(msg, bot) {
        const chatId = msg.chat.id;
        const text = msg.text;
        const userName = msg.from.first_name;
        
        const echoText = text.substring(6); // –£–±–∏—Ä–∞–µ–º "/echo "
        
        if (echoText) {
            logger.echo(userName, echoText);
            bot.sendMessage(chatId, `üîä –≠—Ö–æ: ${echoText}`);
        } else {
            bot.sendMessage(chatId, `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /echo <—Ç–µ–∫—Å—Ç>`);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ai_status
    async handleAiStatus(msg, bot) {
        const chatId = msg.chat.id;
        
        try {
            const status = await this.gigaChatService.checkStatus();
            const tokenInfo = this.gigaChatService.getTokenInfo();
            
            let statusMessage = `ü§ñ –°—Ç–∞—Ç—É—Å GigaChat:\n\n`;
            
            if (status.status === 'connected') {
                statusMessage += `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n`;
                statusMessage += `üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: ${status.modelsCount}\n`;
            } else {
                statusMessage += `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${status.error}\n`;
            }
            
            statusMessage += `üîë –¢–æ–∫–µ–Ω: ${tokenInfo.isValid ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}\n`;
            
            if (tokenInfo.expiresAt) {
                statusMessage += `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${tokenInfo.expiresAt.toLocaleString()}`;
            }
            
            bot.sendMessage(chatId, statusMessage);
        } catch (error) {
            const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat:\n\n${error.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.js`;
            bot.sendMessage(chatId, errorMessage);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleRegularMessage(msg, bot) {
        const chatId = msg.chat.id;
        const text = msg.text;
        const userName = msg.from.first_name;
        
        logger.message(userName, text);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        bot.sendChatAction(chatId, 'typing');
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GigaChat
            const aiResponse = await this.gigaChatService.sendMessage(text, userName);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            bot.sendMessage(chatId, `ü§ñ **–û—Ç–≤–µ—Ç –ò–ò:**\n\n${aiResponse}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat:', error.message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorMessage = `‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
            bot.sendMessage(chatId, errorMessage);
        }
    }
}

module.exports = MessageHandler; 