const mysql = require('mysql2/promise');
const logger = require('../../shared/logger/logger');

class Database {
    constructor() {
        this.connection = null;
        this.config = require('../../../../config');
    }

    async connect() {
        try {
            if (!this.connection) {
                this.connection = await mysql.createConnection({
                    host: this.config.DATABASE.HOST,
                    port: this.config.DATABASE.PORT,
                    user: this.config.DATABASE.USER,
                    password: this.config.DATABASE.PASSWORD,
                    database: this.config.DATABASE.NAME,
                    charset: 'utf8mb4',
                    timezone: '+00:00'
                });

                logger.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
            throw error;
        }
    }

    async disconnect() {
        try {
            if (this.connection) {
                await this.connection.end();
                this.connection = null;
                logger.info('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
            throw error;
        }
    }

    async run(sql, params = []) {
        try {
            if (!this.connection || this.connection.state === 'disconnected') {
                await this.connect();
            }
            const [result] = await this.connection.execute(sql, params);
            return { 
                id: result.insertId, 
                changes: result.affectedRows 
            };
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            if (error.message.includes('closed state') || error.message.includes('disconnected')) {
                logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                this.connection = null;
                await this.connect();
                const [result] = await this.connection.execute(sql, params);
                return { 
                    id: result.insertId, 
                    changes: result.affectedRows 
                };
            }
            throw error;
        }
    }

    async get(sql, params = []) {
        try {
            if (!this.connection || this.connection.state === 'disconnected') {
                await this.connect();
            }
            const [rows] = await this.connection.execute(sql, params);
            return rows[0] || null;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            if (error.message.includes('closed state') || error.message.includes('disconnected')) {
                logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                this.connection = null;
                await this.connect();
                const [rows] = await this.connection.execute(sql, params);
                return rows[0] || null;
            }
            throw error;
        }
    }

    async all(sql, params = []) {
        try {
            if (!this.connection || this.connection.state === 'disconnected') {
                await this.connect();
            }
            const [rows] = await this.connection.execute(sql, params);
            return rows;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            if (error.message.includes('closed state') || error.message.includes('disconnected')) {
                logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                this.connection = null;
                await this.connect();
                const [rows] = await this.connection.execute(sql, params);
                return rows;
            }
            throw error;
        }
    }

    async transaction(callback) {
        try {
            if (!this.connection) {
                await this.connect();
            }
            await this.connection.beginTransaction();
            
            try {
                await callback(this);
                await this.connection.commit();
            } catch (error) {
                await this.connection.rollback();
                throw error;
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
            throw error;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
const databaseInstance = new Database();

module.exports = databaseInstance; 