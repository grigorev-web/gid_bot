const logger = require('../../shared/logger/logger');
const User = require('../../database/models/User');

class CallbackHandler {
    constructor(gigaChatService) {
        this.gigaChatService = gigaChatService;
        this.userModel = new User();
    }

    async handleCallback(callbackQuery, bot) {
        try {
            const data = callbackQuery.data;
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;

            logger.info(`–ü–æ–ª—É—á–µ–Ω callback: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${callbackQuery.from.id}`);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback'–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'
            });
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: ${error.message}`);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
            });
        }
    }

    async handleStatsCallback(data, chatId, messageId, bot) {
        try {
            const action = data.split('_')[1];
            
            switch (action) {
                case 'detailed':
                    await this.showDetailedStats(chatId, messageId, bot);
                    break;
                case 'global':
                    await this.showGlobalStats(chatId, messageId, bot);
                    break;
                case 'back':
                    await this.showMainStats(chatId, messageId, bot);
                    break;
                default:
                    await this.showMainStats(chatId, messageId, bot);
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stats callback: ${error.message}`);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
                chat_id: chatId,
                message_id: messageId
            });
        }
    }

    async handleSettingsCallback(data, chatId, messageId, bot) {
        try {
            const action = data.split('_')[1];
            
            switch (action) {
                case 'language':
                    await this.showLanguageSettings(chatId, messageId, bot);
                    break;
                case 'notifications':
                    await this.toggleNotifications(chatId, messageId, bot);
                    break;
                case 'back':
                    await this.showMainSettings(chatId, messageId, bot);
                    break;
                default:
                    await this.showMainSettings(chatId, messageId, bot);
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ settings callback: ${error.message}`);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', {
                chat_id: chatId,
                message_id: messageId
            });
        }
    }

    async handleAiCallback(data, chatId, messageId, bot) {
        try {
            const action = data.split('_')[1];
            
            switch (action) {
                case 'status':
                    await this.showAiStatus(chatId, messageId, bot);
                    break;
                case 'models':
                    await this.showAiModels(chatId, messageId, bot);
                    break;
                case 'back':
                    await this.showAiMain(chatId, messageId, bot);
                    break;
                default:
                    await this.showAiMain(chatId, messageId, bot);
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI callback: ${error.message}`);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± AI', {
                chat_id: chatId,
                message_id: messageId
            });
        }
    }

    async handleHelpCallback(chatId, messageId, bot) {
        const helpText = `
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /ai_status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI
‚Ä¢ /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º —Å –ø–æ–º–æ—â—å—é GigaChat AI.

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:*
‚Ä¢ –¢–µ–∫—Å—Ç
‚Ä¢ –§–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é)
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (—Å –æ–ø–∏—Å–∞–Ω–∏–µ–º)

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: 1000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: –¥–æ 30 —Å–µ–∫—É–Ω–¥
        `;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
        };

        await bot.editMessageText(helpText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async handleUnknownCallback(chatId, messageId, bot) {
        await bot.editMessageText('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', {
            chat_id: chatId,
            message_id: messageId
        });
    }

    async showMainStats(chatId, messageId, bot) {
        const statsText = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:
        `;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats_detailed' }],
                [{ text: 'üåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats_global' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
        };

        await bot.editMessageText(statsText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async showDetailedStats(chatId, messageId, bot) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsText = `
üìà *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
        `;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'stats_back' }]
            ]
        };

        await bot.editMessageText(statsText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async showGlobalStats(chatId, messageId, bot) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsText = `
üåç *–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
        `;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'stats_back' }]
            ]
        };

        await bot.editMessageText(statsText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async showMainSettings(chatId, messageId, bot) {
        const settingsText = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
        `;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üåê –Ø–∑—ã–∫', callback_data: 'settings_language' }],
                [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
        };

        await bot.editMessageText(settingsText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async showLanguageSettings(chatId, messageId, bot) {
        const languageText = `
üåê *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞*

–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
        `;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'language_ru' }],
                [{ text: 'üá∫üá∏ English', callback_data: 'language_en' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings_back' }]
            ]
        };

        await bot.editMessageText(languageText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async toggleNotifications(chatId, messageId, bot) {
        const notificationText = `
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        `;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings_back' }]
            ]
        };

        await bot.editMessageText(notificationText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async showAiMain(chatId, messageId, bot) {
        const aiText = `
ü§ñ *AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        `;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üìä –°—Ç–∞—Ç—É—Å AI', callback_data: 'ai_status' }],
                [{ text: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏', callback_data: 'ai_models' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
        };

        await bot.editMessageText(aiText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async showAiStatus(chatId, messageId, bot) {
        try {
            const status = await this.gigaChatService.checkStatus();
            
            let statusText = '';
            if (status.available) {
                statusText = `
‚úÖ *–°—Ç–∞—Ç—É—Å GigaChat*

*–°—Ç–∞—Ç—É—Å:* –†–∞–±–æ—Ç–∞–µ—Ç
*–ú–æ–¥–µ–ª–∏:* ${status.models.length} –¥–æ—Å—Ç—É–ø–Ω–æ
*–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* ${new Date().toLocaleString('ru-RU')}
                `;
            } else {
                statusText = `
‚ùå *–°—Ç–∞—Ç—É—Å GigaChat*

*–û—à–∏–±–∫–∞:* ${status.error}
*–°—Ç–∞—Ç—É—Å:* –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
*–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* ${new Date().toLocaleString('ru-RU')}
                `;
            }

            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'ai_status' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ AI', callback_data: 'ai_back' }]
                ]
            };

            await bot.editMessageText(statusText, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ AI: ${error.message}`);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ AI', {
                chat_id: chatId,
                message_id: messageId
            });
        }
    }

    async showAiModels(chatId, messageId, bot) {
        try {
            const models = await this.gigaChatService.getModels();
            const modelsList = models.data?.map(model => `‚Ä¢ ${model.id}`).join('\n') || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π';
            
            const modelsText = `
üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ GigaChat*

${modelsList}

*–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π:* ${models.data?.length || 0}
            `;

            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'ai_models' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ AI', callback_data: 'ai_back' }]
                ]
            };

            await bot.editMessageText(modelsText, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π AI: ${error.message}`);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π', {
                chat_id: chatId,
                message_id: messageId
            });
        }
    }

    async cleanup() {
        try {
            await this.userModel.close();
            logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—á–∏—â–µ–Ω');
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback: ${error.message}`);
        }
    }
}

module.exports = CallbackHandler;