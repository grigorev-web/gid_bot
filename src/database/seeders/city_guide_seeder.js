const Database = require('../connection/database');
const logger = require('../../shared/logger/logger');

class CityGuideSeeder {
    constructor() {
        this.db = Database;
    }

    async seed() {
        try {
            await this.db.connect();
            
            console.log('üå± –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –≥–∏–¥–∞...');
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
            await this.seedAddresses();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏–π
            await this.seedEstablishments();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
            await this.seedWorkingHours();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            await this.seedEvents();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–π
            await this.seedPromotions();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
            await this.seedAttractions();
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            await this.seedCategoryRelations();
            
            console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –≥–∏–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
            logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: ${error.message}`);
            throw error;
        } finally {
            await this.db.disconnect();
        }
    }

    async seedAddresses() {
        const addresses = [
            {
                street: '–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞',
                house_number: '1',
                city: '–ú–æ—Å–∫–≤–∞',
                postal_code: '125009',
                latitude: 55.7558,
                longitude: 37.6176
            },
            {
                street: '–ê—Ä–±–∞—Ç',
                house_number: '15',
                city: '–ú–æ—Å–∫–≤–∞',
                postal_code: '119002',
                latitude: 55.7494,
                longitude: 37.5912
            },
            {
                street: '–ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç',
                house_number: '2/1',
                city: '–ú–æ—Å–∫–≤–∞',
                postal_code: '121248',
                latitude: 55.7445,
                longitude: 37.5364
            },
            {
                street: '–ü–æ–∫—Ä–æ–≤–∫–∞',
                house_number: '22',
                city: '–ú–æ—Å–∫–≤–∞',
                postal_code: '101000',
                latitude: 55.7558,
                longitude: 37.6496
            },
            {
                street: '–ù–∏–∫–æ–ª—å—Å–∫–∞—è —É–ª–∏—Ü–∞',
                house_number: '10',
                city: '–ú–æ—Å–∫–≤–∞',
                postal_code: '109012',
                latitude: 55.7565,
                longitude: 37.6214
            }
        ];

        for (const address of addresses) {
            await this.db.run(
                'INSERT INTO addresses (street, house_number, city, postal_code, latitude, longitude) VALUES (?, ?, ?, ?, ?, ?)',
                [address.street, address.house_number, address.city, address.postal_code, address.latitude, address.longitude]
            );
        }
        
        console.log('‚úÖ –ê–¥—Ä–µ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    async seedEstablishments() {
        const establishments = [
            {
                name: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–£ –ü—É—à–∫–∏–Ω–∞"',
                description: '–≠–ª–∏—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Ä—É—Å—Å–∫–æ–π –∫—É—Ö–Ω–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
                address_id: 1,
                phone: '+7(495)123-45-67',
                website: 'http://pushkin-rest.ru',
                email: 'info@pushkin-rest.ru',
                rating: 4.8,
                price_range: 'expensive'
            },
            {
                name: '–ë–∞—Ä "–ö—Ä–∞—Å–Ω—ã–π"',
                description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ä —Å –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –∫–æ–∫—Ç–µ–π–ª—è–º–∏',
                address_id: 2,
                phone: '+7(495)234-56-78',
                website: 'http://redbar.ru',
                email: 'hello@redbar.ru',
                rating: 4.5,
                price_range: 'moderate'
            },
            {
                name: '–ù–æ—á–Ω–æ–π –∫–ª—É–± "–≠–ª–µ–∫—Ç—Ä–æ"',
                description: '–¢—Ä–µ–Ω–¥–æ–≤—ã–π –Ω–æ—á–Ω–æ–π –∫–ª—É–± —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –º—É–∑—ã–∫–æ–π',
                address_id: 3,
                phone: '+7(495)345-67-89',
                website: 'http://electroclub.ru',
                email: 'info@electroclub.ru',
                rating: 4.3,
                price_range: 'expensive'
            },
            {
                name: '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä "–û–∫—Ç—è–±—Ä—å"',
                description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä —Å IMAX –∑–∞–ª–æ–º',
                address_id: 4,
                phone: '+7(495)456-78-90',
                website: 'http://oktyabr-cinema.ru',
                email: 'tickets@oktyabr-cinema.ru',
                rating: 4.6,
                price_range: 'moderate'
            },
            {
                name: '–¢–µ–∞—Ç—Ä "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∏–∫"',
                description: '–ò–∑–≤–µ—Å—Ç–Ω—ã–π –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∞—Ç—Ä',
                address_id: 5,
                phone: '+7(495)567-89-01',
                website: 'http://sovremennik.ru',
                email: 'boxoffice@sovremennik.ru',
                rating: 4.7,
                price_range: 'moderate'
            }
        ];

        for (const establishment of establishments) {
            await this.db.run(
                'INSERT INTO establishments (name, description, address_id, phone, website, email, rating, price_range) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                [establishment.name, establishment.description, establishment.address_id, establishment.phone, establishment.website, establishment.email, establishment.rating, establishment.price_range]
            );
        }
        
        console.log('‚úÖ –ó–∞–≤–µ–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    async seedWorkingHours() {
        const workingHours = [
            // –†–µ—Å—Ç–æ—Ä–∞–Ω "–£ –ü—É—à–∫–∏–Ω–∞" - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å 12:00 –¥–æ 23:00
            { establishment_id: 1, day_of_week: 1, open_time: '12:00:00', close_time: '23:00:00' },
            { establishment_id: 1, day_of_week: 2, open_time: '12:00:00', close_time: '23:00:00' },
            { establishment_id: 1, day_of_week: 3, open_time: '12:00:00', close_time: '23:00:00' },
            { establishment_id: 1, day_of_week: 4, open_time: '12:00:00', close_time: '23:00:00' },
            { establishment_id: 1, day_of_week: 5, open_time: '12:00:00', close_time: '23:00:00' },
            { establishment_id: 1, day_of_week: 6, open_time: '12:00:00', close_time: '23:00:00' },
            { establishment_id: 1, day_of_week: 7, open_time: '12:00:00', close_time: '23:00:00' },
            
            // –ë–∞—Ä "–ö—Ä–∞—Å–Ω—ã–π" - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 18:00 –¥–æ 02:00
            { establishment_id: 2, day_of_week: 1, open_time: '18:00:00', close_time: '02:00:00' },
            { establishment_id: 2, day_of_week: 2, open_time: '18:00:00', close_time: '02:00:00' },
            { establishment_id: 2, day_of_week: 3, open_time: '18:00:00', close_time: '02:00:00' },
            { establishment_id: 2, day_of_week: 4, open_time: '18:00:00', close_time: '02:00:00' },
            { establishment_id: 2, day_of_week: 5, open_time: '18:00:00', close_time: '02:00:00' },
            { establishment_id: 2, day_of_week: 6, open_time: '18:00:00', close_time: '02:00:00' },
            { establishment_id: 2, day_of_week: 7, open_time: '18:00:00', close_time: '02:00:00' },
            
            // –ù–æ—á–Ω–æ–π –∫–ª—É–± "–≠–ª–µ–∫—Ç—Ä–æ" - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å 22:00 –¥–æ 06:00
            { establishment_id: 3, day_of_week: 1, is_closed: true },
            { establishment_id: 3, day_of_week: 2, is_closed: true },
            { establishment_id: 3, day_of_week: 3, is_closed: true },
            { establishment_id: 3, day_of_week: 4, is_closed: true },
            { establishment_id: 3, day_of_week: 5, is_closed: true },
            { establishment_id: 3, day_of_week: 6, open_time: '22:00:00', close_time: '06:00:00' },
            { establishment_id: 3, day_of_week: 7, open_time: '22:00:00', close_time: '06:00:00' },
            
            // –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä "–û–∫—Ç—è–±—Ä—å" - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å 10:00 –¥–æ 00:00
            { establishment_id: 4, day_of_week: 1, open_time: '10:00:00', close_time: '00:00:00' },
            { establishment_id: 4, day_of_week: 2, open_time: '10:00:00', close_time: '00:00:00' },
            { establishment_id: 4, day_of_week: 3, open_time: '10:00:00', close_time: '00:00:00' },
            { establishment_id: 4, day_of_week: 4, open_time: '10:00:00', close_time: '00:00:00' },
            { establishment_id: 4, day_of_week: 5, open_time: '10:00:00', close_time: '00:00:00' },
            { establishment_id: 4, day_of_week: 6, open_time: '10:00:00', close_time: '00:00:00' },
            { establishment_id: 4, day_of_week: 7, open_time: '10:00:00', close_time: '00:00:00' },
            
            // –¢–µ–∞—Ç—Ä "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∏–∫" - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å 12:00 –¥–æ 20:00
            { establishment_id: 5, day_of_week: 1, is_closed: true },
            { establishment_id: 5, day_of_week: 2, open_time: '12:00:00', close_time: '20:00:00' },
            { establishment_id: 5, day_of_week: 3, open_time: '12:00:00', close_time: '20:00:00' },
            { establishment_id: 5, day_of_week: 4, open_time: '12:00:00', close_time: '20:00:00' },
            { establishment_id: 5, day_of_week: 5, open_time: '12:00:00', close_time: '20:00:00' },
            { establishment_id: 5, day_of_week: 6, open_time: '12:00:00', close_time: '20:00:00' },
            { establishment_id: 5, day_of_week: 7, open_time: '12:00:00', close_time: '20:00:00' }
        ];

        for (const hours of workingHours) {
            if (hours.is_closed) {
                await this.db.run(
                    'INSERT INTO working_hours (establishment_id, day_of_week, open_time, close_time, is_closed) VALUES (?, ?, ?, ?, ?)',
                    [hours.establishment_id, hours.day_of_week, '00:00:00', '00:00:00', true]
                );
            } else {
                await this.db.run(
                    'INSERT INTO working_hours (establishment_id, day_of_week, open_time, close_time) VALUES (?, ?, ?, ?)',
                    [hours.establishment_id, hours.day_of_week, hours.open_time, hours.close_time]
                );
            }
        }
        
        console.log('‚úÖ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    async seedEvents() {
        const events = [
            {
                name: '–ö–æ–Ω—Ü–µ—Ä—Ç –≥—Ä—É–ø–ø—ã "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥"',
                description: '–ë–æ–ª—å—à–æ–π –∫–æ–Ω—Ü–µ—Ä—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º–∞',
                event_type: 'concert',
                start_date: '2024-12-25 20:00:00',
                end_date: '2024-12-25 23:00:00',
                establishment_id: 3,
                address_id: null,
                price: 3000.00,
                max_participants: 500
            },
            {
                name: '–ù–æ–≤–æ–≥–æ–¥–Ω—è—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞',
                description: '–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è –Ω–æ–≤–æ–≥–æ–¥–Ω—è—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ —Å –¥–∏–¥–∂–µ—è–º–∏',
                event_type: 'party',
                start_date: '2024-12-31 22:00:00',
                end_date: '2025-01-01 06:00:00',
                establishment_id: 3,
                address_id: null,
                price: 5000.00,
                max_participants: 800
            },
            {
                name: '–î–µ–Ω—å –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã',
                description: '–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ —Å –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ –∏ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–º',
                event_type: 'city_holiday',
                start_date: '2024-09-07 12:00:00',
                end_date: '2024-09-07 23:00:00',
                address_id: 1,
                establishment_id: null,
                price: 0.00,
                max_participants: null
            },
            {
                name: '–ü—Ä–µ–º—å–µ—Ä–∞ —Ñ–∏–ª—å–º–∞ "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"',
                description: '–ü—Ä–µ–º—å–µ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–π —ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏–∏',
                event_type: 'cinema',
                start_date: '2024-12-20 19:00:00',
                end_date: '2024-12-20 22:00:00',
                establishment_id: 4,
                address_id: null,
                price: 800.00,
                max_participants: null
            },
            {
                name: '–°–ø–µ–∫—Ç–∞–∫–ª—å "–ì–æ—Ä–µ –æ—Ç —É–º–∞"',
                description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–æ–º–µ–¥–∏—è –ì—Ä–∏–±–æ–µ–¥–æ–≤–∞',
                event_type: 'theater',
                start_date: '2024-12-28 19:00:00',
                end_date: '2024-12-28 22:00:00',
                establishment_id: 5,
                address_id: null,
                price: 2500.00,
                max_participants: null
            }
        ];

        for (const event of events) {
            await this.db.run(
                'INSERT INTO events (name, description, event_type, start_date, end_date, address_id, establishment_id, price, max_participants) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
                [event.name, event.description, event.event_type, event.start_date, event.end_date, event.address_id, event.establishment_id, event.price, event.max_participants]
            );
        }
        
        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    async seedPromotions() {
        const promotions = [
            {
                name: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –º–µ–Ω—é',
                description: '–°–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ –±–ª—é–¥–∞ –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏ —Å 12:00 –¥–æ 16:00',
                promotion_type: 'discount',
                discount_percent: 20,
                discount_amount: null,
                start_date: '2024-12-01',
                end_date: '2024-12-31',
                valid_days: JSON.stringify([1, 2, 3, 4, 5]),
                valid_hours: JSON.stringify({ start: '12:00', end: '16:00' }),
                establishment_id: 1,
                address_id: null,
                is_permanent: false
            },
            {
                name: 'Happy Hours –≤ –±–∞—Ä–µ',
                description: '–°–∫–∏–¥–∫–∞ 50% –Ω–∞ –≤—Å–µ –∫–æ–∫—Ç–µ–π–ª–∏ —Å 18:00 –¥–æ 20:00',
                promotion_type: 'happy_hours',
                discount_percent: 50,
                discount_amount: null,
                start_date: null,
                end_date: null,
                valid_days: JSON.stringify([1, 2, 3, 4, 5, 6, 7]),
                valid_hours: JSON.stringify({ start: '18:00', end: '20:00' }),
                establishment_id: 2,
                address_id: null,
                is_permanent: true
            },
            {
                name: '–ë–∏–ª–µ—Ç—ã –≤ –∫–∏–Ω–æ —Å–æ —Å–∫–∏–¥–∫–æ–π',
                description: '–°–∫–∏–¥–∫–∞ 30% –Ω–∞ –≤—Å–µ —Å–µ–∞–Ω—Å—ã –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏',
                promotion_type: 'discount',
                discount_percent: 30,
                discount_amount: null,
                start_date: null,
                end_date: null,
                valid_days: JSON.stringify([1, 2, 3, 4, 5]),
                valid_hours: null,
                establishment_id: 4,
                address_id: null,
                is_permanent: true
            },
            {
                name: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∞—Ç—Ä–∞',
                description: '–°–∫–∏–¥–∫–∞ 15% –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∑—Ä–∏—Ç–µ–ª–µ–π',
                promotion_type: 'loyalty_program',
                discount_percent: 15,
                discount_amount: null,
                start_date: null,
                end_date: null,
                valid_days: null,
                valid_hours: null,
                establishment_id: 5,
                address_id: null,
                is_permanent: true
            }
        ];

        for (const promotion of promotions) {
            await this.db.run(
                'INSERT INTO promotions (name, description, promotion_type, discount_percent, discount_amount, start_date, end_date, valid_days, valid_hours, establishment_id, address_id, is_permanent) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                [promotion.name, promotion.description, promotion.promotion_type, promotion.discount_percent, promotion.discount_amount, promotion.start_date, promotion.end_date, promotion.valid_days, promotion.valid_hours, promotion.establishment_id, promotion.address_id, promotion.is_permanent]
            );
        }
        
        console.log('‚úÖ –ê–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    async seedAttractions() {
        const attractions = [
            {
                name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å',
                description: '–ì–ª–∞–≤–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ú–æ—Å–∫–≤—ã, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞',
                attraction_type: 'landmark',
                address_id: 1,
                rating: 5.0,
                is_free: true,
                entry_fee: null,
                opening_hours: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'
            },
            {
                name: '–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ',
                description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã –∏ –æ—Ç–¥—ã—Ö–∞',
                attraction_type: 'park',
                address_id: 2,
                rating: 4.7,
                is_free: true,
                entry_fee: null,
                opening_hours: '06:00 - 23:00'
            },
            {
                name: '–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è',
                description: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π —Å –±–æ–≥–∞—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞',
                attraction_type: 'museum',
                address_id: 3,
                rating: 4.8,
                is_free: false,
                entry_fee: 500.00,
                opening_hours: '10:00 - 18:00, –≤—ã—Ö–æ–¥–Ω–æ–π - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
            },
            {
                name: '–ü–∞–º—è—Ç–Ω–∏–∫ –ú–∏–Ω–∏–Ω—É –∏ –ü–æ–∂–∞—Ä—Å–∫–æ–º—É',
                description: '–ü–∞–º—è—Ç–Ω–∏–∫ –Ω–∞—Ä–æ–¥–Ω—ã–º –≥–µ—Ä–æ—è–º –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏',
                attraction_type: 'monument',
                address_id: 1,
                rating: 4.5,
                is_free: true,
                entry_fee: null,
                opening_hours: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'
            },
            {
                name: '–°–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –Ω–∞ –í–æ—Ä–æ–±—å–µ–≤—ã—Ö –≥–æ—Ä–∞—Ö',
                description: '–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥ –Ω–∞ –ú–æ—Å–∫–≤—É —Å –≤—ã—Å–æ—Ç—ã –ø—Ç–∏—á—å–µ–≥–æ –ø–æ–ª–µ—Ç–∞',
                attraction_type: 'viewpoint',
                address_id: 4,
                rating: 4.9,
                is_free: true,
                entry_fee: null,
                opening_hours: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'
            }
        ];

        for (const attraction of attractions) {
            await this.db.run(
                'INSERT INTO attractions (name, description, attraction_type, address_id, rating, is_free, entry_fee, opening_hours) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                [attraction.name, attraction.description, attraction.attraction_type, attraction.address_id, attraction.rating, attraction.is_free, attraction.entry_fee, attraction.opening_hours]
            );
        }
        
        console.log('‚úÖ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    async seedCategoryRelations() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const categories = await this.db.all('SELECT id, name, entity_type FROM categories');
            
            // –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            const establishmentCategories = [
                { establishment_id: 1, category_name: '–†–µ—Å—Ç–æ—Ä–∞–Ω' },
                { establishment_id: 2, category_name: '–ë–∞—Ä' },
                { establishment_id: 3, category_name: '–ù–æ—á–Ω–æ–π –∫–ª—É–±' },
                { establishment_id: 4, category_name: '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä' },
                { establishment_id: 5, category_name: '–¢–µ–∞—Ç—Ä' }
            ];

            for (const ec of establishmentCategories) {
                const category = categories.find(c => c.name === ec.category_name && c.entity_type === 'establishment');
                if (category) {
                    await this.db.run(
                        'INSERT INTO establishment_categories (establishment_id, category_id) VALUES (?, ?)',
                        [ec.establishment_id, category.id]
                    );
                }
            }

            // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            const eventCategories = [
                { event_id: 1, category_name: '–ö–æ–Ω—Ü–µ—Ä—Ç' },
                { event_id: 2, category_name: '–í–µ—á–µ—Ä–∏–Ω–∫–∞' },
                { event_id: 3, category_name: '–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫' },
                { event_id: 4, category_name: '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä' },
                { event_id: 5, category_name: '–¢–µ–∞—Ç—Ä' }
            ];

            for (const ec of eventCategories) {
                const category = categories.find(c => c.name === ec.category_name && c.entity_type === 'event');
                if (category) {
                    await this.db.run(
                        'INSERT INTO event_categories (event_id, category_id) VALUES (?, ?)',
                        [ec.event_id, category.id]
                    );
                }
            }

            // –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            const promotionCategories = [
                { promotion_id: 1, category_name: '–°–∫–∏–¥–∫–∞' },
                { promotion_id: 2, category_name: 'Happy Hours' },
                { promotion_id: 3, category_name: '–°–∫–∏–¥–∫–∞' },
                { promotion_id: 4, category_name: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏' }
            ];

            for (const pc of promotionCategories) {
                const category = categories.find(c => c.name === pc.category_name && c.entity_type === 'promotion');
                if (category) {
                    await this.db.run(
                        'INSERT INTO promotion_categories (promotion_id, category_id) VALUES (?, ?)',
                        [pc.promotion_id, category.id]
                    );
                }
            }

            // –°–≤—è–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            const attractionCategories = [
                { attraction_id: 1, category_name: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
                { attraction_id: 2, category_name: '–ü–∞—Ä–∫' },
                { attraction_id: 3, category_name: '–ú—É–∑–µ–π' },
                { attraction_id: 4, category_name: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
                { attraction_id: 5, category_name: '–°–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞' }
            ];

            for (const ac of attractionCategories) {
                const category = categories.find(c => c.name === ac.category_name && c.entity_type === 'attraction');
                if (category) {
                    await this.db.run(
                        'INSERT INTO attraction_categories (attraction_id, category_id) VALUES (?, ?)',
                        [ac.attraction_id, category.id]
                    );
                }
            }

            console.log('‚úÖ –°–≤—è–∑–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        } catch (error) {
            console.log('‚ÑπÔ∏è –°–≤—è–∑–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        }
    }
}

module.exports = CityGuideSeeder; 