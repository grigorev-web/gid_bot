const https = require('https');
const crypto = require('crypto');

class GigaChatAPI {
    constructor() {
        this.clientId = '97cfcff6-3d5b-414b-926c-eb84b359b1f6';
        this.scope = 'GIGACHAT_API_PERS';
        this.authUrl = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
        this.apiUrl = 'https://gigachat.devices.sberbank.ru/api/v1';
        this.accessToken = null;
        this.tokenExpiry = null;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ RqUID
    generateRqUID() {
        return crypto.randomUUID();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Authorization key (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    getAuthKey() {
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π Authorization key
        return 'YOUR_AUTHORIZATION_KEY_HERE';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Access token
    async getAccessToken() {
        return new Promise((resolve, reject) => {
            const authKey = this.getAuthKey();
            if (authKey === 'YOUR_AUTHORIZATION_KEY_HERE') {
                reject(new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å Authorization key –≤ gigachat.js'));
                return;
            }

            const postData = `scope=${this.scope}`;
            const rqUID = this.generateRqUID();

            const options = {
                hostname: 'ngw.devices.sberbank.ru',
                port: 9443,
                path: '/api/v2/oauth',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Accept': 'application/json',
                    'RqUID': rqUID,
                    'Authorization': `Basic ${authKey}`
                }
            };

            const req = https.request(options, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const response = JSON.parse(data);
                        if (response.access_token) {
                            this.accessToken = response.access_token;
                            // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                            this.tokenExpiry = Date.now() + (30 * 60 * 1000);
                            console.log('‚úÖ Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                            resolve(this.accessToken);
                        } else {
                            reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${data}`));
                        }
                    } catch (error) {
                        reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`));
                    }
                });
            });

            req.on('error', (error) => {
                reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`));
            });

            req.write(postData);
            req.end();
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    async ensureValidToken() {
        if (!this.accessToken || (this.tokenExpiry && Date.now() >= this.tokenExpiry)) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Access token...');
            await this.getAccessToken();
        }
        return this.accessToken;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat
    async sendMessage(message, userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') {
        try {
            const token = await this.ensureValidToken();
            
            return new Promise((resolve, reject) => {
                const requestData = {
                    model: 'GigaChat:latest',
                    messages: [
                        {
                            role: 'system',
                            content: `–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}`
                        },
                        {
                            role: 'user',
                            content: message
                        }
                    ],
                    temperature: 0.7,
                    max_tokens: 1000
                };

                const options = {
                    hostname: 'gigachat.devices.sberbank.ru',
                    port: 443,
                    path: '/api/v1/chat/completions',
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                };

                const req = https.request(options, (res) => {
                    let data = '';
                    
                    res.on('data', (chunk) => {
                        data += chunk;
                    });
                    
                    res.on('end', () => {
                        try {
                            const response = JSON.parse(data);
                            if (response.choices && response.choices[0] && response.choices[0].message) {
                                const aiResponse = response.choices[0].message.content;
                                console.log(`ü§ñ GigaChat –æ—Ç–≤–µ—Ç: ${aiResponse}`);
                                resolve(aiResponse);
                            } else {
                                reject(new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ${data}`));
                            }
                        } catch (error) {
                            reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`));
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: ${error.message}`));
                });

                req.write(JSON.stringify(requestData));
                req.end();
            });
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat: ${error.message}`);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    async getModels() {
        try {
            const token = await this.ensureValidToken();
            
            return new Promise((resolve, reject) => {
                const options = {
                    hostname: 'gigachat.devices.sberbank.ru',
                    port: 443,
                    path: '/api/v1/models',
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                };

                const req = https.request(options, (res) => {
                    let data = '';
                    
                    res.on('data', (chunk) => {
                        data += chunk;
                    });
                    
                    res.on('end', () => {
                        try {
                            const response = JSON.parse(data);
                            resolve(response);
                        } catch (error) {
                            reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`));
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`));
                });

                req.end();
            });
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: ${error.message}`);
        }
    }
}

module.exports = GigaChatAPI; 