const logger = require('../../../shared/logger/logger');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const WhereEatCallback = require('./where-eat.callback');
const EventsCallback = require('./events.callback');
const AttractionsCallback = require('./attractions.callback');
const EntertainmentCallback = require('./entertainment.callback');

class CallbackManager {
    constructor() {
        this.callbacks = new Map();
        this.init();
    }

    init() {
        try {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ callback'–∏
            this.registerCallback('where_eat', new WhereEatCallback());
            this.registerCallback('events', new EventsCallback());
            this.registerCallback('attractions', new AttractionsCallback());
            this.registerCallback('entertainment', new EntertainmentCallback());

            logger.info('‚úÖ Callback –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ callback –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${error.message}`);
        }
    }

    registerCallback(callbackData, handler) {
        this.callbacks.set(callbackData, handler);
        logger.info(`üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback: ${callbackData}`);
    }

    async handleCallback(callbackQuery, bot) {
        try {
            const data = callbackQuery.data;
            logger.info(`–ü–æ–ª—É—á–µ–Ω callback: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${callbackQuery.from.id}`);

            // –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ callback'–∞
            const handler = this.callbacks.get(data);
            
            if (handler) {
                logger.info(`–í—ã–ø–æ–ª–Ω—è—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback: ${data}`);
                await handler.handle(callbackQuery, bot);
            } else {
                logger.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback: ${data}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º callback'–µ
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: `–í—ã –Ω–∞–∂–∞–ª–∏: ${data}`,
                    show_alert: false
                });
            }

        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: ${error.message}`);
            
            try {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
                    show_alert: true
                });
            } catch (answerError) {
                logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ: ${answerError.message}`);
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö callback'–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    addCallback(callbackData, handler) {
        this.registerCallback(callbackData, handler);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö callback'–æ–≤
    getRegisteredCallbacks() {
        return Array.from(this.callbacks.keys());
    }

    async cleanup() {
        try {
            this.callbacks.clear();
            logger.info('‚úÖ Callback –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–∏—â–µ–Ω');
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ callback –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${error.message}`);
        }
    }
}

module.exports = CallbackManager; 