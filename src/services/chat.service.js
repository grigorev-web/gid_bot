const config = require('../../../config');
const prompts = require('../config/prompts');
const ResponseParser = require('../utils/response.parser');

class ChatService {
    constructor(apiService) {
        this.apiService = apiService;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat
    async sendMessage(message, userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') {
        try {
            const token = await this.apiService.getTokenForRequest();
            
            const requestData = {
                model: config.GIGACHAT.MODEL,
                messages: [
                    {
                        role: 'system',
                        content: prompts.SYSTEM_PROMPT(userName)
                    },
                    {
                        role: 'user',
                        content: message
                    }
                ],
                temperature: config.GIGACHAT.TEMPERATURE,
                max_tokens: config.GIGACHAT.MAX_TOKENS
            };
            
            const options = {
                hostname: 'gigachat.devices.sberbank.ru',
                port: 443,
                path: '/api/v1/chat/completions',
                method: 'POST',
                headers: this.apiService.createHeaders(token),
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL –æ—à–∏–±–∫–∏ –¥–ª—è GigaChat API
                rejectUnauthorized: false,
                requestCert: false,
                agent: false
            };

            const response = await this.apiService.makeRequest(options, requestData);
            
            if (response.choices && response.choices[0] && response.choices[0].message) {
                const rawResponse = response.choices[0].message.content;
                console.log(`ü§ñ GigaChat —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: ${rawResponse}`);
                
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                const parsedResponse = ResponseParser.parseGigaChatResponse(rawResponse);
                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${parsedResponse}`);
                
                return parsedResponse;
            } else {
                throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(response)}`);
            }
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat: ${error.message}`);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    async getModels() {
        try {
            const token = await this.apiService.getTokenForRequest();
            
            const options = {
                hostname: 'gigachat.devices.sberbank.ru',
                port: 443,
                path: '/api/v1/models',
                method: 'GET',
                headers: this.apiService.createHeaders(token),
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL –æ—à–∏–±–∫–∏ –¥–ª—è GigaChat API
                rejectUnauthorized: false,
                requestCert: false,
                agent: false
            };

            return await this.apiService.makeRequest(options);
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: ${error.message}`);
        }
    }
}

module.exports = ChatService; 