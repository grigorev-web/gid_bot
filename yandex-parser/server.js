const express = require('express');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;
const HOST = process.env.HOST || '0.0.0.0'; // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å –ª—é–±–æ–≥–æ IP

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync('logs')) {
    fs.mkdirSync('logs');
}

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json({ limit: '50mb' }));

// Middleware –¥–ª—è CORS (—Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤)
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    
    if (req.method === 'OPTIONS') {
        res.sendStatus(200);
    } else {
        next();
    }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã –ü–∞—Ä—Å–µ—Ä</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                h1 { color: #333; }
                .status { padding: 10px; background: #e8f5e8; border-radius: 5px; }
                .ip-info { background: #f0f0f0; padding: 10px; border-radius: 5px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <h1>üöÄ –°–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç</h1>
            <div class="status">
                <p>‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}</p>
                <p>üìù –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /receive_data</p>
                <p>üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É logs/</p>
                <p>üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>
            </div>
            <div class="ip-info">
                <p><strong>IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:</strong> ${req.connection.remoteAddress || req.ip || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                <p><strong>User-Agent:</strong> ${req.headers['user-agent'] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            </div>
        </body>
        </html>
    `);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
app.post('/receive_data', (req, res) => {
    try {
        const data = req.body;
        
        // –°–æ–∑–¥–∞–µ–º timestamp –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const logFile = `logs/yandex_data_${timestamp}.json`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        fs.writeFileSync(logFile, JSON.stringify(data, null, 2), 'utf8');
        
        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('\n' + '='.repeat(60));
        console.log(`üÜï –ù–û–í–´–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´ ${new Date().toLocaleString()}`);
        console.log('='.repeat(60));
        console.log('IP –∫–ª–∏–µ–Ω—Ç–∞:', req.ip || req.connection.remoteAddress);
        console.log('URL:', data.url);
        console.log('–ú–µ—Ç–æ–¥:', data.method);
        console.log('–í—Ä–µ–º—è:', data.timestamp);
        console.log('–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:', data.response ? data.response.length : 0, '—Å–∏–º–≤–æ–ª–æ–≤');
        console.log('–§–∞–π–ª –ª–æ–≥–∞:', logFile);
        console.log('='.repeat(60));
        
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
        if (data.response && data.response.length > 200) {
            console.log('–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞:', data.response.substring(0, 200) + '...');
        } else if (data.response) {
            console.log('–û—Ç–≤–µ—Ç:', data.response);
        }
        console.log('='.repeat(60) + '\n');
        
        res.json({
            status: 'success',
            message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
            log_file: logFile,
            timestamp: new Date().toISOString(),
            server_ip: req.connection.localAddress,
            client_ip: req.ip || req.connection.remoteAddress
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(400).json({
            status: 'error',
            message: error.message
        });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/stats', (req, res) => {
    try {
        const logsDir = path.join(__dirname, 'logs');
        const files = fs.readdirSync(logsDir);
        const stats = {
            total_files: files.length,
            files: files.slice(-10), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ–∞–π–ª–æ–≤
            server_uptime: process.uptime(),
            memory_usage: process.memoryUsage(),
            server_ip: req.connection.localAddress,
            client_ip: req.ip || req.connection.remoteAddress
        };
        res.json(stats);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
app.get('/test', (req, res) => {
    res.json({
        status: 'success',
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString(),
        server_ip: req.connection.localAddress,
        client_ip: req.ip || req.connection.remoteAddress,
        headers: req.headers
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, HOST, () => {
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://' + HOST + ':' + PORT);
    console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ http://' + HOST + ':' + PORT + '/receive_data');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://' + HOST + ':' + PORT + '/stats');
    console.log('üß™ –¢–µ—Å—Ç: http://' + HOST + ':' + PORT + '/test');
    console.log('üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É logs/');
    console.log('‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
    process.exit(0);
}); 