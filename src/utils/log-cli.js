#!/usr/bin/env node

const logManager = require('./log-manager');
const logger = require('../shared/logger/logger');
const readline = require('readline');

class LogCLI {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    async run() {
        console.log('üìä –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏ Telegram –±–æ—Ç–∞');
        console.log('=====================================\n');

        const args = process.argv.slice(2);
        
        if (args.length > 0) {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é
            await this.executeCommand(args);
        } else {
            // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            await this.interactiveMode();
        }

        this.rl.close();
    }

    async executeCommand(args) {
        const command = args[0];
        const params = args.slice(1);

        try {
            switch (command) {
                case 'stats':
                    this.showStats();
                    break;
                case 'list':
                    this.showLogFiles();
                    break;
                case 'view':
                    if (params[0]) {
                        await this.viewLogFile(params[0], params[1]);
                    } else {
                        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: view <filename> [lines]');
                    }
                    break;
                case 'search':
                    if (params[0]) {
                        await this.searchLogs(params[0], params[1], params[2]);
                    } else {
                        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: search <query> [filename] [maxResults]');
                    }
                    break;
                case 'cleanup':
                    const months = params[0] ? parseInt(params[0]) : 12;
                    await this.cleanupLogs(months);
                    break;
                case 'export':
                    if (params[0]) {
                        await this.exportLogs(params[0], params[1], params[2]);
                    } else {
                        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: export <filename> [startDate] [endDate]');
                    }
                    break;
                case 'performance':
                    this.showPerformanceInfo();
                    break;
                case 'help':
                    this.showHelp();
                    break;
                default:
                    console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
                    this.showHelp();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error.message);
        }
    }

    async interactiveMode() {
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('  stats      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤');
        console.log('  list       - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤');
        console.log('  view       - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤');
        console.log('  search     - –ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º');
        console.log('  cleanup    - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤');
        console.log('  export     - –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤');
        console.log('  performance - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        console.log('  help       - –°–ø—Ä–∞–≤–∫–∞');
        console.log('  exit       - –í—ã—Ö–æ–¥\n');

        while (true) {
            const answer = await this.question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ');
            
            if (answer.toLowerCase() === 'exit') {
                break;
            }

            const args = answer.trim().split(' ');
            if (args[0]) {
                await this.executeCommand(args);
                console.log('');
            }
        }
    }

    showStats() {
        const stats = logManager.getStats();
        if (!stats) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
            return;
        }

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:');
        console.log(`  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${stats.totalFiles}`);
        console.log(`  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${stats.totalSizeMB} MB`);
        console.log(`  –°—Ç–∞—Ä–µ–π—à–∏–π —Ñ–∞–π–ª: ${stats.oldestFile}`);
        console.log(`  –ù–æ–≤–µ–π—à–∏–π —Ñ–∞–π–ª: ${stats.newestFile}`);
        console.log(`  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${stats.lastModified}`);
    }

    showLogFiles() {
        const files = logManager.getLogFiles();
        if (files.length === 0) {
            console.log('üìÅ –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        console.log('üìÅ –§–∞–π–ª—ã –ª–æ–≥–æ–≤:');
        files.forEach(file => {
            const filePath = require('path').join(logManager.logDir, file);
            try {
                const stats = require('fs').statSync(filePath);
                const size = (stats.size / 1024).toFixed(2);
                console.log(`  ${file} (${size} KB)`);
            } catch (error) {
                console.log(`  ${file} (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è)`);
            }
        });
    }

    async viewLogFile(filename, lines = 100) {
        try {
            const content = logManager.getLogContent(filename, parseInt(lines) || 100);
            console.log(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${filename} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${lines} —Å—Ç—Ä–æ–∫):`);
            console.log('='.repeat(80));
            console.log(content);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
        }
    }

    async searchLogs(query, filename = null, maxResults = 50) {
        try {
            const results = logManager.searchLogs(query, filename, parseInt(maxResults) || 50);
            
            if (results.length === 0) {
                console.log(`üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                return;
            }

            console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${query}" (–Ω–∞–π–¥–µ–Ω–æ: ${results.length}):`);
            console.log('='.repeat(80));

            results.forEach((result, index) => {
                console.log(`${index + 1}. –§–∞–π–ª: ${result.file}, —Å—Ç—Ä–æ–∫–∞: ${result.line}`);
                console.log(`   –í—Ä–µ–º—è: ${result.timestamp || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${result.content.substring(0, 200)}...`);
                console.log('');
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
        }
    }

    async cleanupLogs(monthsToKeep) {
        try {
            console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ ${monthsToKeep} –º–µ—Å—è—Ü–µ–≤...`);
            const deletedCount = await logManager.cleanupOldLogs(monthsToKeep);
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
        }
    }

    async exportLogs(filename, startDate = null, endDate = null) {
        try {
            console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤...');
            const exportPath = logManager.exportLogsToJson(filename, startDate, endDate);
            console.log(`‚úÖ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: ${exportPath}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
        }
    }

    showPerformanceInfo() {
        const info = logManager.getPerformanceInfo();
        if (!info) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            return;
        }

        console.log('‚ö° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
        console.log(`  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${info.totalFiles}`);
        console.log(`  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${info.totalSize} MB`);
        console.log(`  –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${info.averageFileSize}`);
        console.log(`  –°—Ç–∞—Ä–µ–π—à–∏–π —Ñ–∞–π–ª: ${info.oldestFile}`);
        console.log(`  –ù–æ–≤–µ–π—à–∏–π —Ñ–∞–π–ª: ${info.newestFile}`);
        console.log(`  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${info.lastModified}`);
    }

    showHelp() {
        console.log('üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:');
        console.log('');
        console.log('  stats                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤');
        console.log('  list                     - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤');
        console.log('  view <filename> [lines]  - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 —Å—Ç—Ä–æ–∫)');
        console.log('  search <query> [file] [max] - –ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º');
        console.log('  cleanup [months]         - –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ N –º–µ—Å—è—Ü–µ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)');
        console.log('  export <name> [start] [end] - –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ JSON');
        console.log('  performance               - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        console.log('  help                     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
        console.log('');
        console.log('–ü—Ä–∏–º–µ—Ä—ã:');
        console.log('  node log-cli.js stats');
        console.log('  node log-cli.js view bot-2024-01.log 50');
        console.log('  node log-cli.js search "–æ—à–∏–±–∫–∞"');
        console.log('  node log-cli.js export january-2024');
    }

    question(query) {
        return new Promise(resolve => {
            this.rl.question(query, resolve);
        });
    }
}

// –ó–∞–ø—É—Å–∫ CLI
if (require.main === module) {
    const cli = new LogCLI();
    cli.run().catch(console.error);
}

module.exports = LogCLI; 