const winston = require('winston');
const DailyRotateFile = require('winston-daily-rotate-file');
const path = require('path');
const fs = require('fs');

class Logger {
    constructor() {
        this.logDir = path.join(__dirname, '../../../logs');
        this.ensureLogDirectory();
        this.setupWinston();
    }

    ensureLogDirectory() {
        if (!fs.existsSync(this.logDir)) {
            fs.mkdirSync(this.logDir, { recursive: true });
        }
    }

    setupWinston() {
        // –§–æ—Ä–º–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤
        const logFormat = winston.format.combine(
            winston.format.timestamp({
                format: 'YYYY-MM-DD HH:mm:ss'
            }),
            winston.format.errors({ stack: true }),
            winston.format.json()
        );

        // –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (–±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π)
        const consoleFormat = winston.format.combine(
            winston.format.colorize(),
            winston.format.timestamp({
                format: 'HH:mm:ss'
            }),
            winston.format.printf(({ timestamp, level, message, ...meta }) => {
                let msg = `${timestamp} [${level}]: ${message}`;
                if (Object.keys(meta).length > 0) {
                    msg += ` ${JSON.stringify(meta)}`;
                }
                return msg;
            })
        );

        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        this.logger = winston.createLogger({
            level: process.env.LOG_LEVEL || 'info',
            format: logFormat,
            defaultMeta: { service: 'telegram-bot' },
            transports: [
                // –õ–æ–≥–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
                new DailyRotateFile({
                    filename: path.join(this.logDir, 'bot-%Y-%m.log'),
                    datePattern: 'YYYY-MM',
                    frequency: 'month',
                    maxSize: '20m',
                    maxFiles: '12', // –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤
                    format: logFormat,
                    level: 'info'
                }),
                
                // –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
                new DailyRotateFile({
                    filename: path.join(this.logDir, 'error-%Y-%m.log'),
                    datePattern: 'YYYY-MM',
                    frequency: 'month',
                    maxSize: '20m',
                    maxFiles: '12',
                    format: logFormat,
                    level: 'error'
                }),

                // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
                new DailyRotateFile({
                    filename: path.join(this.logDir, 'debug-%Y-%m.log'),
                    datePattern: 'YYYY-MM',
                    frequency: 'month',
                    maxSize: '20m',
                    maxFiles: '12',
                    format: logFormat,
                    level: 'debug'
                })
            ]
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if (process.env.NODE_ENV !== 'production') {
            this.logger.add(new winston.transports.Console({
                format: consoleFormat
            }));
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ winston
        this.logger.on('error', (error) => {
            console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:', error);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
        this.logger.transports.forEach(transport => {
            if (transport instanceof DailyRotateFile) {
                transport.on('rotate', (oldFilename, newFilename) => {
                    console.log(`üìÖ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤: ${oldFilename} ‚Üí ${newFilename}`);
                });
            }
        });
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    info(message, meta = {}) {
        this.logger.info(message, meta);
    }

    error(message, meta = {}) {
        this.logger.error(message, meta);
    }

    warn(message, meta = {}) {
        this.logger.warn(message, meta);
    }

    debug(message, meta = {}) {
        this.logger.debug(message, meta);
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±–æ—Ç–∞
    botStart() {
        this.info('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω', { 
            timestamp: new Date().toISOString(),
            version: process.env.npm_package_version || 'unknown'
        });
    }

    botStop(signal) {
        this.info('üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', { 
            signal,
            timestamp: new Date().toISOString()
        });
    }

    messageReceived(message) {
        this.info('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
            chatId: message.chat?.id,
            userId: message.from?.id,
            username: message.from?.username,
            messageType: message.text ? 'text' : 'other'
        });
    }

    commandExecuted(command, userId, chatId) {
        this.info('‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞', {
            command,
            userId,
            chatId,
            timestamp: new Date().toISOString()
        });
    }

    errorOccurred(error, context = {}) {
        this.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', {
            message: error.message,
            stack: error.stack,
            context,
            timestamp: new Date().toISOString()
        });
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∞—Ö
    getCurrentLogFiles() {
        try {
            const files = fs.readdirSync(this.logDir);
            return files
                .filter(file => file.endsWith('.log'))
                .sort()
                .reverse();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤:', error.message);
            return [];
        }
    }

    getLogFileInfo() {
        try {
            const files = this.getCurrentLogFiles();
            const fileInfo = files.map(file => {
                const filePath = path.join(this.logDir, file);
                const stats = fs.statSync(filePath);
                return {
                    name: file,
                    size: stats.size,
                    modified: stats.mtime,
                    created: stats.birthtime
                };
            });
            return fileInfo;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö –ª–æ–≥–æ–≤:', error.message);
            return [];
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    async cleanupOldLogs(monthsToKeep = 12) {
        try {
            const files = this.getCurrentLogFiles();
            const now = new Date();
            let deletedCount = 0;

            for (const file of files) {
                const filePath = path.join(this.logDir, file);
                const stats = fs.statSync(filePath);
                const fileAge = (now - stats.mtime) / (1000 * 60 * 60 * 24 * 30); // –≤ –º–µ—Å—è—Ü–∞—Ö
                
                if (fileAge > monthsToKeep) {
                    fs.unlinkSync(filePath);
                    deletedCount++;
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤: ${file}`);
                }
            }

            this.info(`–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, { 
                deletedCount,
                monthsToKeep 
            });

            return deletedCount;
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤', { error: error.message });
            return 0;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
    getLogStats() {
        try {
            const files = this.getLogFileInfo();
            const totalSize = files.reduce((sum, file) => sum + file.size, 0);
            const oldestFile = files[files.length - 1];
            const newestFile = files[0];

            return {
                totalFiles: files.length,
                totalSize: totalSize,
                totalSizeMB: (totalSize / (1024 * 1024)).toFixed(2),
                oldestFile: oldestFile?.name,
                newestFile: newestFile?.name,
                lastModified: newestFile?.modified
            };
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤', { error: error.message });
            return null;
        }
    }
}

module.exports = new Logger(); 