const logger = require('../../shared/logger/logger');
const User = require('../../database/models/User');
const Message = require('../../database/models/Message');

class MessageHandler {
    constructor(gigaChatService) {
        this.gigaChatService = gigaChatService;
        this.userModel = new User();
        this.messageModel = new Message();
        this.init();
    }

    async init() {
        try {
            await this.userModel.init();
            await this.messageModel.init();
            logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: ${error.message}`);
        }
    }

    async handleStart(msg, bot) {
        try {
            const user = msg.from;
            const chat = msg.chat;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            await this.userModel.createOrUpdate(user);
            await this.userModel.updateLastActivity(user.id);

            const welcomeMessage = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!

–Ø –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å GigaChat –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /ai_status - –°—Ç–∞—Ç—É—Å AI
‚Ä¢ /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º!
            `;

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ú–µ–Ω—é
            const keyboard = {
                reply_markup: {
                    keyboard: [
                        [{ text: 'üìã –ú–µ–Ω—é', callback_data: 'menu' }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            };

            await bot.sendMessage(chat.id, welcomeMessage, keyboard);
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: ${error.message}`);
            await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    async handleHelp(msg, bot) {
        try {
            const helpMessage = `
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /ai_status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI
‚Ä¢ /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º —Å –ø–æ–º–æ—â—å—é GigaChat AI.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ –¢–µ–∫—Å—Ç
‚Ä¢ –§–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é)
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (—Å –æ–ø–∏—Å–∞–Ω–∏–µ–º)

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: 1000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: –¥–æ 30 —Å–µ–∫—É–Ω–¥
            `;

            await bot.sendMessage(msg.chat.id, helpMessage);
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help: ${error.message}`);
            await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.');
        }
    }

    async handleAiStatus(msg, bot) {
        try {
            const statusMessage = 'üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å GigaChat...';
            const statusMsg = await bot.sendMessage(msg.chat.id, statusMessage);

            const status = await this.gigaChatService.checkStatus();
            
            let responseText = '';
            if (status.available) {
                responseText = `
‚úÖ GigaChat –¥–æ—Å—Ç—É–ø–µ–Ω

–°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç
–ú–æ–¥–µ–ª–∏: ${status.models.length} –¥–æ—Å—Ç—É–ø–Ω–æ
–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString('ru-RU')}
                `;
            } else {
                responseText = `
‚ùå GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

–û—à–∏–±–∫–∞: ${status.error}
–°—Ç–∞—Ç—É—Å: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString('ru-RU')}
                `;
            }

            await bot.editMessageText(responseText, {
                chat_id: msg.chat.id,
                message_id: statusMsg.message_id
            });
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI: ${error.message}`);
            await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ AI');
        }
    }

    async handleStats(msg, bot) {
        try {
            const user = msg.from;
            const userStats = await this.messageModel.getMessageStats(user.id);
            const userInfo = await this.userModel.findByTelegramId(user.id);

            let statsText = `
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${userStats.total_messages || 0}
‚Ä¢ AI –æ—Ç–≤–µ—Ç–æ–≤: ${userStats.ai_responses || 0}
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${userStats.text_messages || 0}
‚Ä¢ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: ${(userStats.photo_messages || 0) + (userStats.video_messages || 0)}

AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${userStats.total_tokens || 0}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(userStats.avg_response_time || 0)}ms

–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${userInfo?.last_activity ? new Date(userInfo.last_activity).toLocaleString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${userInfo?.created_at ? new Date(userInfo.created_at).toLocaleString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            `;

            await bot.sendMessage(msg.chat.id, statsText);
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
            await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }

    async handleSettings(msg, bot) {
        try {
            const user = msg.from;
            const settings = await this.userModel.getSettings(user.id) || {};

            const settingsText = `
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –Ø–∑—ã–∫: ${settings.language || 'ru'}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifications !== false ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${settings.autoSave !== false ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /set_language - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
‚Ä¢ /toggle_notifications - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            `;

            await bot.sendMessage(msg.chat.id, settingsText);
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
            await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    }

    async handleMenu(msg, bot) {
        try {
            const chat = msg.chat;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ú–µ–Ω—é
            const keyboard = {
                reply_markup: {
                    keyboard: [
                        [{ text: 'üìã –ú–µ–Ω—é', callback_data: 'menu' }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            };

            const menuMessage = `
üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            `;

            await bot.sendMessage(chat.id, menuMessage, keyboard);
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é`);
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /menu: ${error.message}`);
            await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é.');
        }
    }

    async handleRegularMessage(msg, bot) {
        try {
            const user = msg.from;
            const chat = msg.chat;
            const messageText = msg.text || msg.caption || '';

            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            await this.userModel.createOrUpdate(user);
            await this.userModel.updateLastActivity(user.id);
            await this.userModel.incrementMessageCount(user.id);

            // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await this.messageModel.saveMessage(msg);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
            const typingMsg = await bot.sendMessage(chat.id, 'ü§ñ AI –¥—É–º–∞–µ—Ç...');

            try {
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                const messageHistory = await this.messageModel.getMessageHistory(user.id, 10);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                const context = [];
                const recentMessages = messageHistory.slice(-6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
                
                for (const msg of recentMessages) {
                    context.push({
                        role: msg.is_ai_response ? 'assistant' : 'user',
                        content: msg.content
                    });
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
                const aiResponse = await this.gigaChatService.sendMessage(
                    messageText,
                    user.first_name || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    context
                );

                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ AI –∑–∞–ø—Ä–æ—Å–æ–≤
                await this.userModel.incrementAiRequestsCount(user.id);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º AI –æ—Ç–≤–µ—Ç
                const aiMessageData = {
                    ...msg,
                    text: aiResponse.content,
                    message_id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
                    from: { id: user.id, is_bot: true, first_name: 'AI Assistant' }
                };
                await this.messageModel.saveMessage(aiMessageData, true, {
                    model: aiResponse.model,
                    tokens_used: aiResponse.tokens_used,
                    response_time_ms: aiResponse.response_time_ms
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.editMessageText(aiResponse.content, {
                    chat_id: chat.id,
                    message_id: typingMsg.message_id
                });

                logger.info(`AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI: ${error.message}`);
                await bot.editMessageText(
                    '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    {
                        chat_id: chat.id,
                        message_id: typingMsg.message_id
                    }
                );
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            await bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    }

    async handleEcho(msg, bot) {
        try {
            const echoText = msg.text.substring(6); // –£–±–∏—Ä–∞–µ–º '/echo '
            if (echoText.trim()) {
                await bot.sendMessage(msg.chat.id, `üîä Echo: ${echoText}`);
            } else {
                await bot.sendMessage(msg.chat.id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /echo <—Ç–µ–∫—Å—Ç>');
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /echo: ${error.message}`);
            await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã echo');
        }
    }

    async cleanup() {
        try {
            await this.userModel.close();
            await this.messageModel.close();
            logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω');
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: ${error.message}`);
        }
    }
}

module.exports = MessageHandler; 