const fs = require('fs');
const path = require('path');

class Logger {
    constructor() {
        this.logDir = path.join(__dirname, '../../../logs');
        this.logFile = path.join(this.logDir, 'bot.log');
        this.ensureLogDirectory();
    }

    ensureLogDirectory() {
        if (!fs.existsSync(this.logDir)) {
            fs.mkdirSync(this.logDir, { recursive: true });
        }
    }

    getTimestamp() {
        return new Date().toISOString();
    }

    formatMessage(level, message) {
        const timestamp = this.getTimestamp();
        return `[${timestamp}] [${level.toUpperCase()}] ${message}\n`;
    }

    writeToFile(message) {
        try {
            fs.appendFileSync(this.logFile, message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª:', error.message);
        }
    }

    log(level, message) {
        const formattedMessage = this.formatMessage(level, message);
        
        // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(formattedMessage.trim());
        
        // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        this.writeToFile(formattedMessage);
    }

    info(message) {
        this.log('info', message);
    }

    error(message) {
        this.log('error', message);
    }

    warn(message) {
        this.log('warn', message);
    }

    debug(message) {
        this.log('debug', message);
    }

    botStart() {
        this.info('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    }

    shutdown(signal) {
        this.info(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    }
}

module.exports = new Logger(); 