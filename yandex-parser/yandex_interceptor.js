// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
// –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∞—à —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ

(function() {
    'use strict';
    
    // –£–ö–ê–ñ–ò–¢–ï IP –ê–î–†–ï–° –í–ê–®–ï–ì–û –°–ï–†–í–ï–†–ê
    const SERVER_IP = '46.173.27.12'; // –ù–∞–ø—Ä–∏–º–µ—Ä: '123.45.67.89'
    const SERVER_PORT = '443'; // –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
    const SERVER_URL = `https://${SERVER_IP}:${SERVER_PORT}/receive_data`;
    
    console.log('üöÄ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞:', SERVER_URL);
    console.log('‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π SERVER_IP');
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å—ã
    const originalFetch = window.fetch;
    window.fetch = function(...args) {
        const url = args[0];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –∫ API –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
        if (typeof url === 'string' && (
            url.includes('/maps/api/search?') //|| 
            //url.includes('api-maps.yandex.ru') ||
           // url.includes('search-maps.yandex.ru')
        )) {
            console.log('üîç –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞–º:', url);
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            return originalFetch.apply(this, args).then(response => {
                const clonedResponse = response.clone();
                
                // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                clonedResponse.text().then(text => {
                    try {
                        const data = {
                            timestamp: new Date().toISOString(),
                            url: url,
                            method: args[1]?.method || 'GET',
                            headers: args[1]?.headers || {},
                            body: args[1]?.body || null,
                            response: text,
                            responseHeaders: Object.fromEntries(response.headers.entries())
                        };
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
                        fetch(SERVER_URL, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data)
                        })
                        .then(serverResponse => serverResponse.json())
                        .then(result => {
                            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', result);
                        })
                        .catch(error => {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
                            console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
                            console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å IP –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                            console.log('   - –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä');
                            console.log('   - –û—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç 5000');
                        });
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                    }
                });
                
                return response;
            });
        }
        
        return originalFetch.apply(this, args);
    };
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º XMLHttpRequest
    const originalXHROpen = XMLHttpRequest.prototype.open;
    const originalXHRSend = XMLHttpRequest.prototype.send;
    
    XMLHttpRequest.prototype.open = function(method, url, ...args) {
        this._method = method;
        this._url = url;
        return originalXHROpen.apply(this, [method, url, ...args]);
    };
    
    XMLHttpRequest.prototype.send = function(data) {
        const xhr = this;
        const url = this._url;
        const method = this._method;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –∫ API –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
        if (typeof url === 'string' && (
            url.includes('maps.yandex.ru') || 
            url.includes('api-maps.yandex.ru') ||
            url.includes('search-maps.yandex.ru')
        )) {
            console.log('üîç –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω XHR –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞–º:', url);
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            const originalOnReadyStateChange = xhr.onreadystatechange;
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    try {
                        const responseData = {
                            timestamp: new Date().toISOString(),
                            url: url,
                            method: method,
                            requestData: data,
                            response: xhr.responseText,
                            status: xhr.status,
                            statusText: xhr.statusText,
                            responseHeaders: xhr.getAllResponseHeaders()
                        };
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
                        fetch(SERVER_URL, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(responseData)
                        })
                        .then(serverResponse => serverResponse.json())
                        .then(result => {
                            console.log('‚úÖ XHR –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', result);
                        })
                        .catch(error => {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ XHR –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
                        });
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ XHR –æ—Ç–≤–µ—Ç–∞:', error);
                    }
                }
                
                if (originalOnReadyStateChange) {
                    originalOnReadyStateChange.apply(xhr, arguments);
                }
            };
        }
        
        return originalXHRSend.apply(this, [data]);
    };
    
    console.log('‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–∞–º –∏ –∏—â–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã - –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã');
    console.log('üîß –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è IP —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SERVER_IP –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞');
    
})(); 