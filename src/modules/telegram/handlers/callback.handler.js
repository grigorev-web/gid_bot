class CallbackHandler {
    constructor(gigaChatService) {
        this.gigaChatService = gigaChatService;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    async handleCallback(callbackQuery, bot) {
        const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;
        const userName = callbackQuery.from.first_name;
        
        console.log(`üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userName}`);
        
        let responseText = '';
        
        switch (data) {
            case 'start_bot':
                responseText = `üöÄ –ü—Ä–∏–≤–µ—Ç, ${userName}! –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò! ü§ñ`;
                break;
                
            case 'echo_info':
                responseText = `üîä –ö–æ–º–∞–Ω–¥–∞ Echo:\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /echo <—Ç–µ–∫—Å—Ç>\n\n–ü—Ä–∏–º–µ—Ä—ã:\n/echo –ü—Ä–∏–≤–µ—Ç –º–∏—Ä\n/echo –ö–∞–∫ –¥–µ–ª–∞?\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç.`;
                break;
                
            case 'ai_status':
                try {
                    const status = await this.gigaChatService.checkStatus();
                    const tokenInfo = this.gigaChatService.getTokenInfo();
                    
                    responseText = `ü§ñ –°—Ç–∞—Ç—É—Å GigaChat:\n\n`;
                    
                    if (status.status === 'connected') {
                        responseText += `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n`;
                        responseText += `üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: ${status.modelsCount}\n`;
                    } else {
                        responseText += `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${status.error}\n`;
                    }
                    
                    responseText += `üîë –¢–æ–∫–µ–Ω: ${tokenInfo.isValid ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}`;
                } catch (error) {
                    responseText = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat:\n\n${error.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.js`;
                }
                break;
                
            case 'about_bot':
                responseText = `‚ÑπÔ∏è –û –±–æ—Ç–µ:\n\nü§ñ –ù–∞–∑–≤–∞–Ω–∏–µ: Telegram Bot —Å GigaChat\nüìÖ –í–µ—Ä—Å–∏—è: 1.0.0\nüîß –Ø–∑—ã–∫: JavaScript\nü§ñ –ò–ò: GigaChat API\nüìä –†–µ–∂–∏–º: –ü–æ–ª–ª–∏–Ω–≥\n\n–£–º–Ω—ã–π –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ò–ò GigaChat –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.`;
                break;
                
            case 'settings':
                responseText = `üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n‚öôÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–æ–¥—É–ª—å–Ω–∞—è\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: src/modules/\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.js\nü§ñ –ò–ò: GigaChat\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª–µ config.js`;
                break;
                
            default:
                responseText = `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${data}`;
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ!'
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.sendMessage(chatId, responseText);
    }
}

module.exports = CallbackHandler; 